package com.company.shenzhou.playerdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.company.shenzhou.bean.dbbean.DownBindNameConverter;
import java.util.List;

import com.company.shenzhou.bean.dbbean.DeviceDBBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_DBBEAN".
*/
public class DeviceDBBeanDao extends AbstractDao<DeviceDBBean, Long> {

    public static final String TABLENAME = "DEVICE_DBBEAN";

    /**
     * Properties of entity DeviceDBBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tag = new Property(1, String.class, "tag", false, "TAG");
        public final static Property DeviceName = new Property(2, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceCode = new Property(3, String.class, "deviceCode", false, "DEVICE_CODE");
        public final static Property MsgMark = new Property(4, String.class, "msgMark", false, "MSG_MARK");
        public final static Property Ip = new Property(5, String.class, "ip", false, "IP");
        public final static Property LiveIp = new Property(6, String.class, "LiveIp", false, "LIVE_IP");
        public final static Property DDNSAcount = new Property(7, String.class, "DDNSAcount", false, "DDNSACOUNT");
        public final static Property DDNSPassword = new Property(8, String.class, "DDNSPassword", false, "DDNSPASSWORD");
        public final static Property DDNSURL = new Property(9, String.class, "DDNSURL", false, "DDNSURL");
        public final static Property DDNSServerIP01 = new Property(10, String.class, "DDNSServerIP01", false, "DDNSSERVER_IP01");
        public final static Property DDNSServerIP02 = new Property(11, String.class, "DDNSServerIP02", false, "DDNSSERVER_IP02");
        public final static Property DDNSServerPort = new Property(12, String.class, "DDNSServerPort", false, "DDNSSERVER_PORT");
        public final static Property DDNSSpare01 = new Property(13, String.class, "DDNSSpare01", false, "DDNSSPARE01");
        public final static Property DDNSSpare02 = new Property(14, String.class, "DDNSSpare02", false, "DDNSSPARE02");
        public final static Property DDNSSpare03 = new Property(15, String.class, "DDNSSpare03", false, "DDNSSPARE03");
        public final static Property Account = new Property(16, String.class, "account", false, "ACCOUNT");
        public final static Property Password = new Property(17, String.class, "password", false, "PASSWORD");
        public final static Property SocketPort = new Property(18, String.class, "socketPort", false, "SOCKET_PORT");
        public final static Property HttpPort = new Property(19, String.class, "httpPort", false, "HTTP_PORT");
        public final static Property LivePort = new Property(20, String.class, "livePort", false, "LIVE_PORT");
        public final static Property MicPort = new Property(21, String.class, "micPort", false, "MIC_PORT");
        public final static Property Title = new Property(22, String.class, "title", false, "TITLE");
        public final static Property DeviceTypeDesc = new Property(23, String.class, "deviceTypeDesc", false, "DEVICE_TYPE_DESC");
        public final static Property DeviceTypeNum = new Property(24, String.class, "deviceTypeNum", false, "DEVICE_TYPE_NUM");
        public final static Property DeviceTypeHexNum = new Property(25, String.class, "deviceTypeHexNum", false, "DEVICE_TYPE_HEX_NUM");
        public final static Property DeviceTypeDecNum = new Property(26, String.class, "deviceTypeDecNum", false, "DEVICE_TYPE_DEC_NUM");
        public final static Property EndoType = new Property(27, String.class, "endoType", false, "ENDO_TYPE");
        public final static Property Channel = new Property(28, String.class, "channel", false, "CHANNEL");
        public final static Property Usemsg00 = new Property(29, String.class, "usemsg00", false, "USEMSG00");
        public final static Property Usemsg01 = new Property(30, String.class, "usemsg01", false, "USEMSG01");
        public final static Property MSelected = new Property(31, Boolean.class, "mSelected", false, "M_SELECTED");
        public final static Property ApiVersion = new Property(32, String.class, "apiVersion", false, "API_VERSION");
        public final static Property IpPublic = new Property(33, String.class, "ipPublic", false, "IP_PUBLIC");
        public final static Property SparePlan = new Property(34, boolean.class, "sparePlan", false, "SPARE_PLAN");
        public final static Property SpareMicPushSteam = new Property(35, String.class, "spareMicPushSteam", false, "SPARE_MIC_PUSH_STEAM");
        public final static Property SpareLiveSteam = new Property(36, String.class, "spareLiveSteam", false, "SPARE_LIVE_STEAM");
        public final static Property AcceptAndInsertDB = new Property(37, String.class, "acceptAndInsertDB", false, "ACCEPT_AND_INSERT_DB");
        public final static Property DownBingNameList = new Property(38, String.class, "downBingNameList", false, "DOWN_BING_NAME_LIST");
    }

    private final DownBindNameConverter downBingNameListConverter = new DownBindNameConverter();

    public DeviceDBBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDBBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_DBBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TAG\" TEXT," + // 1: tag
                "\"DEVICE_NAME\" TEXT," + // 2: deviceName
                "\"DEVICE_CODE\" TEXT," + // 3: deviceCode
                "\"MSG_MARK\" TEXT," + // 4: msgMark
                "\"IP\" TEXT," + // 5: ip
                "\"LIVE_IP\" TEXT," + // 6: LiveIp
                "\"DDNSACOUNT\" TEXT," + // 7: DDNSAcount
                "\"DDNSPASSWORD\" TEXT," + // 8: DDNSPassword
                "\"DDNSURL\" TEXT," + // 9: DDNSURL
                "\"DDNSSERVER_IP01\" TEXT," + // 10: DDNSServerIP01
                "\"DDNSSERVER_IP02\" TEXT," + // 11: DDNSServerIP02
                "\"DDNSSERVER_PORT\" TEXT," + // 12: DDNSServerPort
                "\"DDNSSPARE01\" TEXT," + // 13: DDNSSpare01
                "\"DDNSSPARE02\" TEXT," + // 14: DDNSSpare02
                "\"DDNSSPARE03\" TEXT," + // 15: DDNSSpare03
                "\"ACCOUNT\" TEXT," + // 16: account
                "\"PASSWORD\" TEXT," + // 17: password
                "\"SOCKET_PORT\" TEXT," + // 18: socketPort
                "\"HTTP_PORT\" TEXT," + // 19: httpPort
                "\"LIVE_PORT\" TEXT," + // 20: livePort
                "\"MIC_PORT\" TEXT," + // 21: micPort
                "\"TITLE\" TEXT," + // 22: title
                "\"DEVICE_TYPE_DESC\" TEXT," + // 23: deviceTypeDesc
                "\"DEVICE_TYPE_NUM\" TEXT," + // 24: deviceTypeNum
                "\"DEVICE_TYPE_HEX_NUM\" TEXT," + // 25: deviceTypeHexNum
                "\"DEVICE_TYPE_DEC_NUM\" TEXT," + // 26: deviceTypeDecNum
                "\"ENDO_TYPE\" TEXT," + // 27: endoType
                "\"CHANNEL\" TEXT," + // 28: channel
                "\"USEMSG00\" TEXT," + // 29: usemsg00
                "\"USEMSG01\" TEXT," + // 30: usemsg01
                "\"M_SELECTED\" INTEGER," + // 31: mSelected
                "\"API_VERSION\" TEXT," + // 32: apiVersion
                "\"IP_PUBLIC\" TEXT," + // 33: ipPublic
                "\"SPARE_PLAN\" INTEGER NOT NULL ," + // 34: sparePlan
                "\"SPARE_MIC_PUSH_STEAM\" TEXT," + // 35: spareMicPushSteam
                "\"SPARE_LIVE_STEAM\" TEXT," + // 36: spareLiveSteam
                "\"ACCEPT_AND_INSERT_DB\" TEXT," + // 37: acceptAndInsertDB
                "\"DOWN_BING_NAME_LIST\" TEXT);"); // 38: downBingNameList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_DBBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceDBBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(2, tag);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(3, deviceName);
        }
 
        String deviceCode = entity.getDeviceCode();
        if (deviceCode != null) {
            stmt.bindString(4, deviceCode);
        }
 
        String msgMark = entity.getMsgMark();
        if (msgMark != null) {
            stmt.bindString(5, msgMark);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(6, ip);
        }
 
        String LiveIp = entity.getLiveIp();
        if (LiveIp != null) {
            stmt.bindString(7, LiveIp);
        }
 
        String DDNSAcount = entity.getDDNSAcount();
        if (DDNSAcount != null) {
            stmt.bindString(8, DDNSAcount);
        }
 
        String DDNSPassword = entity.getDDNSPassword();
        if (DDNSPassword != null) {
            stmt.bindString(9, DDNSPassword);
        }
 
        String DDNSURL = entity.getDDNSURL();
        if (DDNSURL != null) {
            stmt.bindString(10, DDNSURL);
        }
 
        String DDNSServerIP01 = entity.getDDNSServerIP01();
        if (DDNSServerIP01 != null) {
            stmt.bindString(11, DDNSServerIP01);
        }
 
        String DDNSServerIP02 = entity.getDDNSServerIP02();
        if (DDNSServerIP02 != null) {
            stmt.bindString(12, DDNSServerIP02);
        }
 
        String DDNSServerPort = entity.getDDNSServerPort();
        if (DDNSServerPort != null) {
            stmt.bindString(13, DDNSServerPort);
        }
 
        String DDNSSpare01 = entity.getDDNSSpare01();
        if (DDNSSpare01 != null) {
            stmt.bindString(14, DDNSSpare01);
        }
 
        String DDNSSpare02 = entity.getDDNSSpare02();
        if (DDNSSpare02 != null) {
            stmt.bindString(15, DDNSSpare02);
        }
 
        String DDNSSpare03 = entity.getDDNSSpare03();
        if (DDNSSpare03 != null) {
            stmt.bindString(16, DDNSSpare03);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(17, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(18, password);
        }
 
        String socketPort = entity.getSocketPort();
        if (socketPort != null) {
            stmt.bindString(19, socketPort);
        }
 
        String httpPort = entity.getHttpPort();
        if (httpPort != null) {
            stmt.bindString(20, httpPort);
        }
 
        String livePort = entity.getLivePort();
        if (livePort != null) {
            stmt.bindString(21, livePort);
        }
 
        String micPort = entity.getMicPort();
        if (micPort != null) {
            stmt.bindString(22, micPort);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(23, title);
        }
 
        String deviceTypeDesc = entity.getDeviceTypeDesc();
        if (deviceTypeDesc != null) {
            stmt.bindString(24, deviceTypeDesc);
        }
 
        String deviceTypeNum = entity.getDeviceTypeNum();
        if (deviceTypeNum != null) {
            stmt.bindString(25, deviceTypeNum);
        }
 
        String deviceTypeHexNum = entity.getDeviceTypeHexNum();
        if (deviceTypeHexNum != null) {
            stmt.bindString(26, deviceTypeHexNum);
        }
 
        String deviceTypeDecNum = entity.getDeviceTypeDecNum();
        if (deviceTypeDecNum != null) {
            stmt.bindString(27, deviceTypeDecNum);
        }
 
        String endoType = entity.getEndoType();
        if (endoType != null) {
            stmt.bindString(28, endoType);
        }
 
        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(29, channel);
        }
 
        String usemsg00 = entity.getUsemsg00();
        if (usemsg00 != null) {
            stmt.bindString(30, usemsg00);
        }
 
        String usemsg01 = entity.getUsemsg01();
        if (usemsg01 != null) {
            stmt.bindString(31, usemsg01);
        }
 
        Boolean mSelected = entity.getMSelected();
        if (mSelected != null) {
            stmt.bindLong(32, mSelected ? 1L: 0L);
        }
 
        String apiVersion = entity.getApiVersion();
        if (apiVersion != null) {
            stmt.bindString(33, apiVersion);
        }
 
        String ipPublic = entity.getIpPublic();
        if (ipPublic != null) {
            stmt.bindString(34, ipPublic);
        }
        stmt.bindLong(35, entity.getSparePlan() ? 1L: 0L);
 
        String spareMicPushSteam = entity.getSpareMicPushSteam();
        if (spareMicPushSteam != null) {
            stmt.bindString(36, spareMicPushSteam);
        }
 
        String spareLiveSteam = entity.getSpareLiveSteam();
        if (spareLiveSteam != null) {
            stmt.bindString(37, spareLiveSteam);
        }
 
        String acceptAndInsertDB = entity.getAcceptAndInsertDB();
        if (acceptAndInsertDB != null) {
            stmt.bindString(38, acceptAndInsertDB);
        }
 
        List downBingNameList = entity.getDownBingNameList();
        if (downBingNameList != null) {
            stmt.bindString(39, downBingNameListConverter.convertToDatabaseValue(downBingNameList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceDBBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(2, tag);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(3, deviceName);
        }
 
        String deviceCode = entity.getDeviceCode();
        if (deviceCode != null) {
            stmt.bindString(4, deviceCode);
        }
 
        String msgMark = entity.getMsgMark();
        if (msgMark != null) {
            stmt.bindString(5, msgMark);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(6, ip);
        }
 
        String LiveIp = entity.getLiveIp();
        if (LiveIp != null) {
            stmt.bindString(7, LiveIp);
        }
 
        String DDNSAcount = entity.getDDNSAcount();
        if (DDNSAcount != null) {
            stmt.bindString(8, DDNSAcount);
        }
 
        String DDNSPassword = entity.getDDNSPassword();
        if (DDNSPassword != null) {
            stmt.bindString(9, DDNSPassword);
        }
 
        String DDNSURL = entity.getDDNSURL();
        if (DDNSURL != null) {
            stmt.bindString(10, DDNSURL);
        }
 
        String DDNSServerIP01 = entity.getDDNSServerIP01();
        if (DDNSServerIP01 != null) {
            stmt.bindString(11, DDNSServerIP01);
        }
 
        String DDNSServerIP02 = entity.getDDNSServerIP02();
        if (DDNSServerIP02 != null) {
            stmt.bindString(12, DDNSServerIP02);
        }
 
        String DDNSServerPort = entity.getDDNSServerPort();
        if (DDNSServerPort != null) {
            stmt.bindString(13, DDNSServerPort);
        }
 
        String DDNSSpare01 = entity.getDDNSSpare01();
        if (DDNSSpare01 != null) {
            stmt.bindString(14, DDNSSpare01);
        }
 
        String DDNSSpare02 = entity.getDDNSSpare02();
        if (DDNSSpare02 != null) {
            stmt.bindString(15, DDNSSpare02);
        }
 
        String DDNSSpare03 = entity.getDDNSSpare03();
        if (DDNSSpare03 != null) {
            stmt.bindString(16, DDNSSpare03);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(17, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(18, password);
        }
 
        String socketPort = entity.getSocketPort();
        if (socketPort != null) {
            stmt.bindString(19, socketPort);
        }
 
        String httpPort = entity.getHttpPort();
        if (httpPort != null) {
            stmt.bindString(20, httpPort);
        }
 
        String livePort = entity.getLivePort();
        if (livePort != null) {
            stmt.bindString(21, livePort);
        }
 
        String micPort = entity.getMicPort();
        if (micPort != null) {
            stmt.bindString(22, micPort);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(23, title);
        }
 
        String deviceTypeDesc = entity.getDeviceTypeDesc();
        if (deviceTypeDesc != null) {
            stmt.bindString(24, deviceTypeDesc);
        }
 
        String deviceTypeNum = entity.getDeviceTypeNum();
        if (deviceTypeNum != null) {
            stmt.bindString(25, deviceTypeNum);
        }
 
        String deviceTypeHexNum = entity.getDeviceTypeHexNum();
        if (deviceTypeHexNum != null) {
            stmt.bindString(26, deviceTypeHexNum);
        }
 
        String deviceTypeDecNum = entity.getDeviceTypeDecNum();
        if (deviceTypeDecNum != null) {
            stmt.bindString(27, deviceTypeDecNum);
        }
 
        String endoType = entity.getEndoType();
        if (endoType != null) {
            stmt.bindString(28, endoType);
        }
 
        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(29, channel);
        }
 
        String usemsg00 = entity.getUsemsg00();
        if (usemsg00 != null) {
            stmt.bindString(30, usemsg00);
        }
 
        String usemsg01 = entity.getUsemsg01();
        if (usemsg01 != null) {
            stmt.bindString(31, usemsg01);
        }
 
        Boolean mSelected = entity.getMSelected();
        if (mSelected != null) {
            stmt.bindLong(32, mSelected ? 1L: 0L);
        }
 
        String apiVersion = entity.getApiVersion();
        if (apiVersion != null) {
            stmt.bindString(33, apiVersion);
        }
 
        String ipPublic = entity.getIpPublic();
        if (ipPublic != null) {
            stmt.bindString(34, ipPublic);
        }
        stmt.bindLong(35, entity.getSparePlan() ? 1L: 0L);
 
        String spareMicPushSteam = entity.getSpareMicPushSteam();
        if (spareMicPushSteam != null) {
            stmt.bindString(36, spareMicPushSteam);
        }
 
        String spareLiveSteam = entity.getSpareLiveSteam();
        if (spareLiveSteam != null) {
            stmt.bindString(37, spareLiveSteam);
        }
 
        String acceptAndInsertDB = entity.getAcceptAndInsertDB();
        if (acceptAndInsertDB != null) {
            stmt.bindString(38, acceptAndInsertDB);
        }
 
        List downBingNameList = entity.getDownBingNameList();
        if (downBingNameList != null) {
            stmt.bindString(39, downBingNameListConverter.convertToDatabaseValue(downBingNameList));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceDBBean readEntity(Cursor cursor, int offset) {
        DeviceDBBean entity = new DeviceDBBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // msgMark
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ip
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // LiveIp
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // DDNSAcount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // DDNSPassword
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // DDNSURL
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // DDNSServerIP01
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // DDNSServerIP02
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // DDNSServerPort
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // DDNSSpare01
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // DDNSSpare02
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // DDNSSpare03
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // account
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // password
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // socketPort
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // httpPort
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // livePort
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // micPort
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // title
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // deviceTypeDesc
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // deviceTypeNum
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // deviceTypeHexNum
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // deviceTypeDecNum
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // endoType
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // channel
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // usemsg00
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // usemsg01
            cursor.isNull(offset + 31) ? null : cursor.getShort(offset + 31) != 0, // mSelected
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // apiVersion
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // ipPublic
            cursor.getShort(offset + 34) != 0, // sparePlan
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // spareMicPushSteam
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // spareLiveSteam
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // acceptAndInsertDB
            cursor.isNull(offset + 38) ? null : downBingNameListConverter.convertToEntityProperty(cursor.getString(offset + 38)) // downBingNameList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceDBBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTag(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMsgMark(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIp(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLiveIp(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDDNSAcount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDDNSPassword(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDDNSURL(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDDNSServerIP01(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDDNSServerIP02(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDDNSServerPort(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDDNSSpare01(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDDNSSpare02(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDDNSSpare03(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAccount(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPassword(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSocketPort(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setHttpPort(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLivePort(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setMicPort(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setTitle(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setDeviceTypeDesc(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDeviceTypeNum(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setDeviceTypeHexNum(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDeviceTypeDecNum(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setEndoType(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setChannel(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setUsemsg00(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setUsemsg01(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setMSelected(cursor.isNull(offset + 31) ? null : cursor.getShort(offset + 31) != 0);
        entity.setApiVersion(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setIpPublic(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setSparePlan(cursor.getShort(offset + 34) != 0);
        entity.setSpareMicPushSteam(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setSpareLiveSteam(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setAcceptAndInsertDB(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setDownBingNameList(cursor.isNull(offset + 38) ? null : downBingNameListConverter.convertToEntityProperty(cursor.getString(offset + 38)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceDBBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceDBBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceDBBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
